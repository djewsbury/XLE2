// Copyright 2015 XLGAMES Inc.
//
// Distributed under the MIT License (See
// accompanying file "LICENSE" or the website
// http://www.opensource.org/licenses/mit-license.php)

#include "CommonResources.h"
#include "Colour.h"
#include "Binding.h"

Texture2D		InputTexture;

float4 copy(float4 position : SV_Position, float2 texCoord : TEXCOORD0) : SV_Target0
{
	return InputTexture.Load(int3(position.xy, 0));
}

float copy_depth(float4 position : SV_Position) : SV_Depth
{
	return InputTexture.Load(int3(position.xy, 0)).r;
}

float4 fake_tonemap(float4 position : SV_Position, float2 texCoord : TEXCOORD0) : SV_Target0
{
	return float4(InputTexture.Load(int3(position.xy, 0)).rgb / LightingScale, 1.f);
}

float4 copy_bilinear(float4 position : SV_Position, float2 texCoord : TEXCOORD0) : SV_Target0
{
	return InputTexture.SampleLevel(ClampingSampler, texCoord, 0);
}

cbuffer ScreenSpaceOutput
{
	float2 OutputMin, OutputMax;
	float2 InputMin, InputMax;
	float2 OutputDimensions;
}

float4 copy_boxfilter(float4 position : SV_Position, float2 texCoord : TEXCOORD0) : SV_Target0
{
	// return InputTexture.SampleLevel(ClampingSampler, texCoord, 0);

	uint2 dims;
	InputTexture.GetDimensions(dims.x, dims.y);

	uint2 inputMin = uint2(InputMin * dims);
	uint2 inputMax = uint2(InputMax * dims);
	uint2 zero = (uint2)floor((position.xy - OutputMin) * (inputMax - inputMin) / (OutputMax - OutputMin) + dims * inputMin);
	uint2 one = (uint2)floor((position.xy + 1.0.xx - OutputMin) * (inputMax - inputMin) / (OutputMax - OutputMin) + dims * inputMin);

	float4 result = 0.0.xxxx;
	for (uint y=zero.y; y<one.y; ++y)
		for (uint x=zero.x; x<one.x; ++x) {
			uint3 coord = uint3(x,y,0);
			coord.x = clamp(coord.x, inputMin.x, inputMax.x-1);
			coord.y = clamp(coord.y, inputMin.y, inputMax.y-1);
			result += InputTexture.Load(coord);
		}
	return result / float((one.x - zero.x) * (one.y - zero.y));
}

float4 copy_boxfilter_alphacomplementweight(float4 position : SV_Position, float2 texCoord : TEXCOORD0) : SV_Target0
{
	uint2 dims;
	InputTexture.GetDimensions(dims.x, dims.y);

	uint2 inputMin = uint2(InputMin * dims);
	uint2 inputMax = uint2(InputMax * dims);
	uint2 zero = (uint2)floor((position.xy - OutputMin) * (inputMax - inputMin) / (OutputMax - OutputMin) + dims * inputMin);
	uint2 one = (uint2)floor((position.xy + 1.0.xx - OutputMin) * (inputMax - inputMin) / (OutputMax - OutputMin) + dims * inputMin);

	float4 result = 0.0.xxxx;
	float rgbWeightSum = 0.f;
	for (uint y=zero.y; y<one.y; ++y)
		for (uint x=zero.x; x<one.x; ++x) {
			uint3 coord = uint3(x,y,0);
			coord.x = clamp(coord.x, inputMin.x, inputMax.x-1);
			coord.y = clamp(coord.y, inputMin.y, inputMax.y-1);
			float4 sample = InputTexture.Load(coord);
			float weight = 1.f-sample.a;
			rgbWeightSum += weight;
			result.rgb += sample.rgb * weight;
			result.a += sample.a;
		}
	return float4(
		result.rgb / max(rgbWeightSum, 0.0001f),
		result.a / float((one.x - zero.x) * (one.y - zero.y)));
}

float4 copy_point(float4 position : SV_Position, float2 texCoord : TEXCOORD0) : SV_Target0
{
	return InputTexture.SampleLevel(PointClampSampler, texCoord, 0);
}

float4 fill_gradient(float4 position : SV_Position, float2 texCoord : TEXCOORD0) : SV_Target0
{
	return float4(texCoord, 0, 1);
}

float4 PCT_Text( float4 input : SV_Position, float4 color : COLOR0, float2 texCoord : TEXCOORD0 ) : SV_Target0
{
	return float4(	color.rgb,
					color.a * InputTexture.Sample(DefaultSampler, texCoord).r);
}

float4 P( float4 input : SV_Position ) : SV_Target0
{
	return float4(1,1,1,1);
}

float4 PC( float4 input : SV_Position, float4 color : COLOR0 ) : SV_Target0
{
	return color;
}

float4 PCT( float4 input : SV_Position, float4 color : COLOR0, float2 texCoord : TEXCOORD0 ) : SV_Target0
{
	return InputTexture.Sample(DefaultSampler, texCoord) * color;
}

cbuffer ScrollConstants
{
	float ScrollAreaMin, ScrollAreaMax;
}

float4 copy_point_scrolllimit(float4 position : SV_Position, float2 texCoord : TEXCOORD0) : SV_Target0
{
	float alpha = saturate((position.y - ScrollAreaMin) / 12.f) * saturate((ScrollAreaMax - position.y) / 12.f);
	return float4(InputTexture.SampleLevel(PointClampSampler, texCoord, 0).rgb, alpha);
}
