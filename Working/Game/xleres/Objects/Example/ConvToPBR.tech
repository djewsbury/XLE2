// CompoundDocument:1
import surface = "xleres/surface.h"
import texture = "xleres/nodes/texture.sh"
import output = "xleres/nodes/output.sh"
import basic = "xleres/nodes/basic.sh"
import colour = "xleres/colour.h"
import decodeparameterstexture_coloredspecular = "xleres/toolshelper/decodeparameterstexture_coloredspecular.sh"

void main(auto Opacity, auto AlphaThreshold, auto SpecularColorTexture, auto MetalMin, auto MetalMax, auto RoughnessMin, auto RoughnessMax, auto SpecularMin, auto SpecularMax, auto MaterialDiffuse, out auto Out)
{
	node node_0 = [[visualNode8]]texture::GetVertexAOMultiplier();
	node node_1 = [[visualNode11]]texture::SampleTextureDiffuse();
	node node_2 = [[visualNode13]]decodeparameterstexture_coloredspecular::DecodeParametersTexture_ColoredSpecular(specColorSample:[[visualNode10]]texture::SampleAnisotropic(texCoord:[[visualNode16]]surface::GetTexCoord().result, inputTexture:SpecularColorTexture).result, diffuseSample:node_1.rgb, specularRange:[[visualNode21]]basic::Combine2(r:SpecularMin, g:SpecularMax).result, roughnessRange:[[visualNode22]]basic::Combine2(r:RoughnessMin, g:RoughnessMax).result, metalRange:[[visualNode23]]basic::Combine2(r:MetalMin, g:MetalMax).result);
	Out = [[visualNode7]]output::Output_PerPixel(cookedLightOcclusion:node_0.result, blendingAlpha:[[visualNode9]]basic::Multiply1(lhs:[[visualNode15]]basic::Multiply1(lhs:[[visualNode14]]texture::MaybeDoAlphaTest(alpha:node_1.alpha, alphaThreshold:AlphaThreshold).result, rhs:[[visualNode18]]texture::GetVertexOpacityMultiplier().result).result, rhs:Opacity).result, worldSpaceNormal:[[visualNode12]]texture::MaybeMakeDoubleSided(normal:[[visualNode0]]surface::GetNormal().result).result, material:node_2.materialParam, cookedAmbientOcclusion:[[visualNode17]]basic::Multiply1(rhs:[[visualNode6]]texture::SampleTextureAO().result, lhs:node_0.result).result, diffuseAlbedo:[[visualNode20]]basic::Multiply3(rhs:node_2.finalDiffuseSample, lhs:[[visualNode19]]colour::SRGBToLinear(input:MaterialDiffuse).result).result, normalMapAccuracy:"1.0f", transmission:"float3(0,0,0)").result;
}
attributes visualNode8(PreviewGeometry:"plane2d", X:"773.000000", Y:"621.000000", State:"Collapsed", OutputToVisualize:"");
attributes visualNode0(PreviewGeometry:"plane2d", X:"653.000000", Y:"182.000000", State:"Collapsed", OutputToVisualize:"");
attributes visualNode1(X:"2134.901855", Y:"246.917114", State:"Normal");
attributes visualNode2(X:"-496.000000", Y:"643.000000", State:"Normal");
attributes visualNode3(X:"-985.000000", Y:"-91.000000", State:"Normal");
attributes visualNode4(X:"-614.000000", Y:"-428.000000", State:"Normal");
attributes visualNode5(X:"237.000000", Y:"-201.000000", State:"Normal");
attributes visualNode6(PreviewGeometry:"plane2d", X:"788.000000", Y:"691.000000", State:"Collapsed", OutputToVisualize:"");
attributes visualNode7(PreviewGeometry:"model", X:"1660.000000", Y:"207.000000", State:"Normal", OutputToVisualize:"result.diffuseAlbedo");
attributes visualNode9(PreviewGeometry:"plane2d", X:"377.000000", Y:"561.000000", State:"Collapsed", OutputToVisualize:"");
attributes visualNode10(PreviewGeometry:"plane2d", X:"-476.000000", Y:"-93.000000", State:"Normal", OutputToVisualize:"");
attributes visualNode11(PreviewGeometry:"plane2d", X:"-476.000000", Y:"211.000000", State:"Normal", OutputToVisualize:"");
attributes visualNode12(PreviewGeometry:"plane2d", X:"817.000000", Y:"180.000000", State:"Collapsed", OutputToVisualize:"");
attributes visualNode13(PreviewGeometry:"plane2d", X:"262.000000", Y:"-31.000000", State:"Normal", OutputToVisualize:"result2.roughness");
attributes visualNode14(PreviewGeometry:"plane2d", X:"-74.000000", Y:"343.000000", State:"Collapsed", OutputToVisualize:"");
attributes visualNode15(PreviewGeometry:"plane2d", X:"188.000000", Y:"483.000000", State:"Collapsed", OutputToVisualize:"");
attributes visualNode16(PreviewGeometry:"plane2d", X:"-862.000000", Y:"6.000000", State:"Collapsed", OutputToVisualize:"");
attributes visualNode17(PreviewGeometry:"plane2d", X:"1059.000000", Y:"664.000000", State:"Collapsed", OutputToVisualize:"");
attributes visualNode18(PreviewGeometry:"plane2d", X:"-117.000000", Y:"540.000000", State:"Collapsed", OutputToVisualize:"");
attributes visualNode19(PreviewGeometry:"plane2d", X:"590.000000", Y:"-143.000000", State:"Collapsed", OutputToVisualize:"");
attributes visualNode20(PreviewGeometry:"plane2d", X:"771.000000", Y:"-109.000000", State:"Collapsed", OutputToVisualize:"");
attributes visualNode21(PreviewGeometry:"plane2d", X:"-174.000000", Y:"-229.000000", State:"Collapsed", OutputToVisualize:"");
attributes visualNode22(PreviewGeometry:"plane2d", X:"-175.000000", Y:"-285.000000", State:"Collapsed", OutputToVisualize:"");
attributes visualNode23(PreviewGeometry:"plane2d", X:"-181.000000", Y:"-344.000000", State:"Collapsed", OutputToVisualize:"");
/* <<Chunk:NodeGraphMetaData:ConvToPBR>>--(
<?xml version="1.0" encoding="utf-8"?>
<NodeGraphMetaData xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.datacontract.org/2004/07/GUILayer">
	<HasTechniqueConfig>true</HasTechniqueConfig>
	<ShaderParameters xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
	<Variables xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
</NodeGraphMetaData>
)-- */



#include "TextureAlgorithm.h" 	// for SystemInputs
#include "Lighting/Forward.h"

#if !((OUTPUT_TEXCOORD==1) && (MAT_ALPHA_TEST==1))
	[earlydepthstencil]
#endif
float4 forward_main(auto Opacity, auto AlphaThreshold, auto SpecularColorTexture, auto MetalMin, auto MetalMax, auto RoughnessMin, auto RoughnessMax, auto SpecularMin, auto SpecularMax, auto MaterialDiffuse, SystemInputs sys) : SV_Target0
{
    // If we're doing to do the alpha threshold test, we
    // should try to do as early in the shader as we can!
    // Unfortunately, there's no real easy way to do that with
    // a node graph here...Unless we create some special #define
    // somehow...

	// DoAlphaTest(geo, GetAlphaThreshold());

	GBufferValues sample;
    main(Opacity, AlphaThreshold, SpecularColorTexture, MetalMin, MetalMax, RoughnessMin, RoughnessMax, SpecularMin, SpecularMax, MaterialDiffuse, sample);

	float3 directionToEye = 0.0.xxx;
	#if (OUTPUT_WORLD_VIEW_VECTOR==1)
		directionToEye = normalize(geo.worldViewVector);
	#endif

	float4 result = float4(
		ResolveLitColor(
			sample, directionToEye, GetWorldPosition(geo),
			LightScreenDest_Create(int2(geo.position.xy), GetSampleIndex(sys))), 1.f);

	#if OUTPUT_FOG_COLOR == 1
		result.rgb = geo.fogColor.rgb + result.rgb * geo.fogColor.a;
	#endif

	result.a = sample.blendingAlpha;

    #if (OUTPUT_COLOUR>=1) && (MAT_VCOLOR_IS_ANIM_PARAM==0)
        result.rgb *= geo.colour.rgb;
    #endif

	#if MAT_SKIP_LIGHTING_SCALE==0
		result.rgb *= LightingScale;		// (note -- should we scale by this here? when using this shader with a basic lighting pipeline [eg, for material preview], the scale is unwanted)
	#endif
	return result;
}



#if !((OUTPUT_TEXCOORD==1) && (MAT_ALPHA_TEST==1))
	[earlydepthstencil]
#endif
GBufferEncoded deferred_main(auto Opacity, auto AlphaThreshold, auto SpecularColorTexture, auto MetalMin, auto MetalMax, auto RoughnessMin, auto RoughnessMax, auto SpecularMin, auto SpecularMax, auto MaterialDiffuse)
{
    // If we're doing to do the alpha threshold test, we
    // should try to do as early in the shader as we can!
    // Unfortunately, there's no real easy way to do that with
    // a node graph here...Unless we create some special #define
    // somehow...
	// DoAlphaTest(geo, GetAlphaThreshold());
	GBufferValues result;
    main(Opacity, AlphaThreshold, SpecularColorTexture, MetalMin, MetalMax, RoughnessMin, RoughnessMax, SpecularMin, SpecularMax, MaterialDiffuse, result);
	return Encode(result);
}



#include "xleres/Forward/Transparency/util.h"

float4 io_main(auto Opacity, auto AlphaThreshold, auto SpecularColorTexture, auto MetalMin, auto MetalMax, auto RoughnessMin, auto RoughnessMax, auto SpecularMin, auto SpecularMax, auto MaterialDiffuse, SystemInputs sys) : SV_Target0
{
    float destinationDepth = DuplicateOfDepthBuffer[uint2(geo.position.xy)];
	float ndcComparison = geo.position.z; // / geo.position.w;
	if (ndcComparison > destinationDepth)
		discard;

    GBufferValues sample;
    main(Opacity, AlphaThreshold, SpecularColorTexture, MetalMin, MetalMax, RoughnessMin, RoughnessMax, SpecularMin, SpecularMax, MaterialDiffuse, sample);

		// note --  At alpha threshold, we just consider
		//			it opaque. It's a useful optimisation
		//			that goes hand in hand with the pre-depth pass.
	const float minAlpha =   1.f / 255.f;
	const float maxAlpha = 0.95f; // 254.f / 255.f;  // AlphaThreshold;
	if (sample.blendingAlpha < minAlpha) {
		discard;
	}

    float4 result = LightSample(sample, geo, sys);

    if (result.a >= maxAlpha) {
		return float4(LightingScale * result.rgb, 1.f); // result.a);
	} else {
		#if !MAT_PREMULTIPLIED_ALPHA
			result.rgb *= result.a;
		#endif

		OutputFragmentNode(uint2(geo.position.xy), result, ndcComparison);
		discard;
		return 0.0.xxxx;
	}
}



[earlydepthstencil]
float4 stochastic_main(VSOutput geo,
	#if (STOCHASTIC_TRANS_PRIMITIVEID==1)
		uint primitiveID : SV_PrimitiveID,
	#endif
	SystemInputs sys) : SV_Target
{
	float occlusion;
	uint type = CalculateStochasticPixelType(geo.position, occlusion);
	[branch] if (type > 0) {
		if (type == 2) return float4(0.0.xxx, 1); // discard;

		// Only need to calculate the "alpha" value for this step...
		GBufferValues sample;
		main(Opacity, AlphaThreshold, SpecularColorTexture, MetalMin, MetalMax, RoughnessMin, RoughnessMax, SpecularMin, SpecularMax, MaterialDiffuse, sample);
		return float4(0.0.xxx, sample.blendingAlpha);
	}

	GBufferValues sample;
	main(Opacity, AlphaThreshold, SpecularColorTexture, MetalMin, MetalMax, RoughnessMin, RoughnessMax, SpecularMin, SpecularMax, MaterialDiffuse, sample);

	float4 litValue = LightSample(sample, geo, sys);
	return float4((LightingScale * (1.f - occlusion) * litValue.a) * litValue.rgb, litValue.a);
}



#include "Forward/Transparency/depthonlyutil.h"

#if (STOCHASTIC_TRANS)

	void depthonly_main(
		VSOutput geo, uint primitiveID : SV_PrimitiveID,
		out uint oCoverage : SV_Coverage
		#if (STOCHASTIC_TRANS_PRIMITIVEID==1)
			, out uint oPrimId : SV_Target0
			#if (STOCHASTIC_TRANS_OPACITY==1)
				, out float oOpacity : SV_Target1
			#endif
		#elif (STOCHASTIC_TRANS_OPACITY==1)
			, out float oOpacity : SV_Target0
		#endif

		)
	{
		GBufferValues sample;
		main(Opacity, AlphaThreshold, SpecularColorTexture, MetalMin, MetalMax, RoughnessMin, RoughnessMax, SpecularMin, SpecularMax, MaterialDiffuse, sample);
		float alpha = sample.blendingAlpha;

		oCoverage = StochasticTransMask(uint2(geo.position.xy), alpha, primitiveID);
		#if (STOCHASTIC_TRANS_PRIMITIVEID==1)
			oPrimId = primitiveID;
		#endif
		#if (STOCHASTIC_TRANS_OPACITY==1)
			oOpacity = alpha;
		#endif
	}

#else

	#if !((OUTPUT_TEXCOORD==1) && ((MAT_ALPHA_TEST==1)||(MAT_ALPHA_TEST_PREDEPTH==1)))
		[earlydepthstencil]
	#endif
	void depthonly_main(VSOutput geo)
	{
		#if !((OUTPUT_TEXCOORD==1) && ((MAT_ALPHA_TEST==1)||(MAT_ALPHA_TEST_PREDEPTH==1)))
				// execute sampling only for discard() events
			GBufferValues sample;
			main(Opacity, AlphaThreshold, SpecularColorTexture, MetalMin, MetalMax, RoughnessMin, RoughnessMax, SpecularMin, SpecularMax, MaterialDiffuse, sample);
		#endif
	}

#endif


/* <<Chunk:TechniqueConfig:main>>--(
~Inherit; xleres/techniques/illum.tech
~Forward
    PixelShader=<.>:forward_main
~Deferred
    PixelShader=<.>:deferred_main
~OrderIndependentTransparency
    PixelShader=<.>:oi_main
~StochasticTransparency
    PixelShader=<.>:stochastic_main
~DepthOnly
    PixelShader=<.>:depthonly_main
)--*/

/* <<Chunk:CBLayout:main>>--(


)--*/

