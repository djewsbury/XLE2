// CompoundDocument:1
import wood_04_g = "xleres/objects/example/procwood/wood_04_g.sh"
import surface = "xleres/surface.h"
import output = "xleres/nodes/output.sh"
import materialparam = "xleres/nodes/materialparam.sh"

void main()
{
	node node_0 = [[visualNode2]]output::Output_PerPixel(diffuseAlbedo:[[visualNode0]]wood_04_g::Wood_04_G(coords:[[visualNode1]]surface::GetWorldPosition().result).color, material:[[visualNode3]]materialparam::CommonMaterialParam_Make(roughness:".3", specular:".05", metal:"0").result, worldSpaceNormal:[[visualNode4]]surface::GetNormal().result, blendingAlpha:"1.0f", normalMapAccuracy:"1.0f", cookedAmbientOcclusion:"1.0f", cookedLightOcclusion:"1.0f", transmission:"0");
}
attributes visualNode0(PreviewGeometry:"sphere", X:"281.000000", Y:"252.000000", State:"Normal", OutputToVisualize:"");
attributes visualNode1(PreviewGeometry:"sphere", X:"-91.000000", Y:"340.000000", State:"Collapsed", OutputToVisualize:"");
attributes visualNode2(PreviewGeometry:"sphere", X:"1036.000000", Y:"388.000000", State:"Normal", OutputToVisualize:"result.diffuseAlbedo");
attributes visualNode3(PreviewGeometry:"sphere", X:"471.000000", Y:"661.000000", State:"Collapsed", OutputToVisualize:"");
attributes visualNode4(PreviewGeometry:"sphere", X:"213.000000", Y:"634.000000", State:"Collapsed", OutputToVisualize:"");
/* <<Chunk:NodeGraphMetaData:ProcWood>>--(
<?xml version="1.0" encoding="utf-8"?>
<NodeGraphMetaData xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.datacontract.org/2004/07/ShaderPatcherLayer">
	<HasTechniqueConfig>true</HasTechniqueConfig>
	<ShaderParameters xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays">
		<d2p1:KeyValueOfstringstring>
			<d2p1:Key>OUTPUT_WORLD_POSITION</d2p1:Key>
			<d2p1:Value>1</d2p1:Value>
		</d2p1:KeyValueOfstringstring>
	</ShaderParameters>
	<Variables xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" />
</NodeGraphMetaData>
)-- */



#include "TextureAlgorithm.h" 	// for SystemInputs
#include "Lighting/Forward.h"

#if !((OUTPUT_TEXCOORD==1) && (MAT_ALPHA_TEST==1))
	[earlydepthstencil]
#endif
float4 forward_main(, SystemInputs sys) : SV_Target0
{
    // If we're doing to do the alpha threshold test, we
    // should try to do as early in the shader as we can!
    // Unfortunately, there's no real easy way to do that with
    // a node graph here...Unless we create some special #define
    // somehow...

	// DoAlphaTest(geo, GetAlphaThreshold());

	GBufferValues sample;
    main(, sample);

	float3 directionToEye = 0.0.xxx;
	#if (OUTPUT_WORLD_VIEW_VECTOR==1)
		directionToEye = normalize(geo.worldViewVector);
	#endif

	float4 result = float4(
		ResolveLitColor(
			sample, directionToEye, GetWorldPosition(geo),
			LightScreenDest_Create(int2(geo.position.xy), GetSampleIndex(sys))), 1.f);

	#if OUTPUT_FOG_COLOR == 1
		result.rgb = geo.fogColor.rgb + result.rgb * geo.fogColor.a;
	#endif

	result.a = sample.blendingAlpha;

    #if (OUTPUT_COLOUR>=1) && (MAT_VCOLOR_IS_ANIM_PARAM==0)
        result.rgb *= geo.colour.rgb;
    #endif

	#if MAT_SKIP_LIGHTING_SCALE==0
		result.rgb *= LightingScale;		// (note -- should we scale by this here? when using this shader with a basic lighting pipeline [eg, for material preview], the scale is unwanted)
	#endif
	return result;
}



#if !((OUTPUT_TEXCOORD==1) && (MAT_ALPHA_TEST==1))
	[earlydepthstencil]
#endif
GBufferEncoded deferred_main()
{
    // If we're doing to do the alpha threshold test, we
    // should try to do as early in the shader as we can!
    // Unfortunately, there's no real easy way to do that with
    // a node graph here...Unless we create some special #define
    // somehow...
	// DoAlphaTest(geo, GetAlphaThreshold());
	GBufferValues result;
    main(, result);
	return Encode(result);
}



#include "xleres/Forward/Transparency/util.h"

float4 io_main(, SystemInputs sys) : SV_Target0
{
    float destinationDepth = DuplicateOfDepthBuffer[uint2(geo.position.xy)];
	float ndcComparison = geo.position.z; // / geo.position.w;
	if (ndcComparison > destinationDepth)
		discard;

    GBufferValues sample;
    main(, sample);

		// note --  At alpha threshold, we just consider
		//			it opaque. It's a useful optimisation
		//			that goes hand in hand with the pre-depth pass.
	const float minAlpha =   1.f / 255.f;
	const float maxAlpha = 0.95f; // 254.f / 255.f;  // AlphaThreshold;
	if (sample.blendingAlpha < minAlpha) {
		discard;
	}

    float4 result = LightSample(sample, geo, sys);

    if (result.a >= maxAlpha) {
		return float4(LightingScale * result.rgb, 1.f); // result.a);
	} else {
		#if !MAT_PREMULTIPLIED_ALPHA
			result.rgb *= result.a;
		#endif

		OutputFragmentNode(uint2(geo.position.xy), result, ndcComparison);
		discard;
		return 0.0.xxxx;
	}
}



[earlydepthstencil]
float4 stochastic_main(VSOutput geo,
	#if (STOCHASTIC_TRANS_PRIMITIVEID==1)
		uint primitiveID : SV_PrimitiveID,
	#endif
	SystemInputs sys) : SV_Target
{
	float occlusion;
	uint type = CalculateStochasticPixelType(geo.position, occlusion);
	[branch] if (type > 0) {
		if (type == 2) return float4(0.0.xxx, 1); // discard;

		// Only need to calculate the "alpha" value for this step...
		GBufferValues sample;
		main(, sample);
		return float4(0.0.xxx, sample.blendingAlpha);
	}

	GBufferValues sample;
	main(, sample);

	float4 litValue = LightSample(sample, geo, sys);
	return float4((LightingScale * (1.f - occlusion) * litValue.a) * litValue.rgb, litValue.a);
}



#include "Forward/Transparency/depthonlyutil.h"

#if (STOCHASTIC_TRANS)

	void depthonly_main(
		VSOutput geo, uint primitiveID : SV_PrimitiveID,
		out uint oCoverage : SV_Coverage
		#if (STOCHASTIC_TRANS_PRIMITIVEID==1)
			, out uint oPrimId : SV_Target0
			#if (STOCHASTIC_TRANS_OPACITY==1)
				, out float oOpacity : SV_Target1
			#endif
		#elif (STOCHASTIC_TRANS_OPACITY==1)
			, out float oOpacity : SV_Target0
		#endif

		)
	{
		GBufferValues sample;
		main(, sample);
		float alpha = sample.blendingAlpha;

		oCoverage = StochasticTransMask(uint2(geo.position.xy), alpha, primitiveID);
		#if (STOCHASTIC_TRANS_PRIMITIVEID==1)
			oPrimId = primitiveID;
		#endif
		#if (STOCHASTIC_TRANS_OPACITY==1)
			oOpacity = alpha;
		#endif
	}

#else

	#if !((OUTPUT_TEXCOORD==1) && ((MAT_ALPHA_TEST==1)||(MAT_ALPHA_TEST_PREDEPTH==1)))
		[earlydepthstencil]
	#endif
	void depthonly_main(VSOutput geo)
	{
		#if !((OUTPUT_TEXCOORD==1) && ((MAT_ALPHA_TEST==1)||(MAT_ALPHA_TEST_PREDEPTH==1)))
				// execute sampling only for discard() events
			GBufferValues sample;
			main(, sample);
		#endif
	}

#endif


/* <<Chunk:TechniqueConfig:main>>--(
~Inherit; xleres/techniques/illum.tech
~Forward
    ~Parameters
        ~Material
            OUTPUT_WORLD_POSITION=1
    PixelShader=<.>:forward_main
~Deferred
    ~Parameters
        ~Material
            OUTPUT_WORLD_POSITION=1
    PixelShader=<.>:deferred_main
~OrderIndependentTransparency
    ~Parameters
        ~Material
            OUTPUT_WORLD_POSITION=1
    PixelShader=<.>:oi_main
~StochasticTransparency
    ~Parameters
        ~Material
            OUTPUT_WORLD_POSITION=1
    PixelShader=<.>:stochastic_main
~DepthOnly
    ~Parameters
        ~Material
            OUTPUT_WORLD_POSITION=1
    PixelShader=<.>:depthonly_main
)--*/

/* <<Chunk:CBLayout:main>>--(


)--*/

