// Distributed under the MIT License (See
// accompanying file "LICENSE" or the website
// http://www.opensource.org/licenses/mit-license.php)

#pragma once

#include "../Types.h"
#include "../VertexUtil.h"
#include "../../Utility/IteratorUtils.h"
#include "../../Utility/StringUtils.h"
#include <vector>
#include <functional>

namespace RenderCore { namespace Assets { class ModelScaffold; }}

namespace RenderCore { namespace Techniques 
{
	class IDeformOperation
	{
	public:
		using VertexElementRange = IteratorRange<RenderCore::VertexElementIterator>;
		virtual void Execute(IteratorRange<const VertexElementRange*> destinationElements) const = 0;
		virtual ~IDeformOperation();
	};

	class DeformOperationInstantiation
	{
	public:
		std::shared_ptr<IDeformOperation> _operation;
		unsigned _geoId;
		std::vector<MiniInputElementDesc> _generatedElements;		///< these are new elements generated by the deform operation
		std::vector<uint64_t> _suppressElements;					///< hide these elements in the static data from the shader 
	};

	class DeformOperationFactory
	{
	public:
		using InstantiationSet = std::vector<DeformOperationInstantiation>;

		InstantiationSet CreateDeformOperations(
			StringSection<> initializer,
			const std::shared_ptr<RenderCore::Assets::ModelScaffold>& modelScaffold);

		using InitiationFunction = std::function<InstantiationSet(StringSection<>, const std::shared_ptr<RenderCore::Assets::ModelScaffold>&)>;
		void RegisterDeformOperation(StringSection<> name, InitiationFunction&& fn);
		
		static bool HasInstance();
		static DeformOperationFactory& GetInstance();

		DeformOperationFactory();
		~DeformOperationFactory();
	private:
		std::vector<std::pair<uint64_t, InitiationFunction>> _instantiationFunctions;
	};

}}

