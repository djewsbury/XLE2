// Copyright 2015 XLGAMES Inc.
//
// Distributed under the MIT License (See
// accompanying file "LICENSE" or the website
// http://www.opensource.org/licenses/mit-license.php)

#include "InterfaceSignature.h"
#include "AntlrHelper.h"
#include "Grammar/ShaderLexer.h"
#include "Grammar/ShaderParser.h"
#include "Grammar/ShaderTreeWalk.h"
#include "../Utility/StringUtils.h"
#include "../Utility/StringFormat.h"
#include "../Utility/Streams/Stream.h"
#include <assert.h>
#include <vector>
// #include <iostream>

struct SSPFormalArg 
{ 
	StringId _name, _type, _semantic;
	unsigned _directionFlags;
};

struct SSPFunction
{
	StringId _name, _returnType, _returnSemantic;
	unsigned _firstArg, _lastArg;
	unsigned _hasImplementation;
};

struct SSPParameterStruct
{
	StringId _name;
	VariableId _firstParameter, _lastParameter;
};

namespace ShaderSourceParser
{
	class WorkingInterfaceStructure
	{
	public:
		GraphLanguage::ShaderFragmentSignature _signature;

		std::vector<std::pair<uint64_t, StringId>> _stringTableToId;
		std::vector<std::string> _stringTable;
		std::vector<GraphLanguage::NodeGraphSignature::Parameter> _parameterTable;
		std::vector<GraphLanguage::UniformBufferSignature::Parameter> _variableTable;

		std::string GetString(StringId id) const { return id != ~0u ? _stringTable[id] : std::string(); }
	};

	static pANTLR3_BASE_TREE BuildAST(struct ShaderParser_Ctx_struct& parser)
    {
		using namespace ShaderSourceParser::AntlrHelper;
        ExceptionContext exceptionContext;
        auto result = parser.entrypoint(&parser).tree;
        if (!exceptionContext._exceptions._errors.empty())
            Throw(ShaderSourceParser::Exceptions::ParsingFailure(MakeIteratorRange(exceptionContext._exceptions._errors)));
		return result;
    }

    GraphLanguage::ShaderFragmentSignature ParseHLSL(StringSection<char> sourceCode)
    {
		using namespace ShaderSourceParser::AntlrHelper;		
        AntlrPtr<struct ANTLR3_INPUT_STREAM_struct>	inputStream = antlr3StringStreamNew(
            (ANTLR3_UINT8*)sourceCode.begin(), ANTLR3_ENC_8BIT, 
            (unsigned)sourceCode.size(), (ANTLR3_UINT8*)"InputStream");

        if (!inputStream) Throw(::Exceptions::BasicLabel("Unable to create the input stream due to malloc() failure\n"));
		AntlrPtr<struct ShaderLexer_Ctx_struct> lxr = ShaderLexerNew(inputStream);	    // CLexerNew is generated by ANTLR
		if (!lxr) Throw(::Exceptions::BasicLabel("Unable to create the lexer due to malloc() failure\n"));

		AntlrPtr<struct ANTLR3_COMMON_TOKEN_STREAM_struct> tokenStream = antlr3CommonTokenStreamSourceNew(ANTLR3_SIZE_HINT, TOKENSOURCE(lxr));
		if (!tokenStream) Throw(::Exceptions::BasicLabel("Out of memory trying to allocate token stream\n"));
		AntlrPtr<struct ShaderParser_Ctx_struct> psr = ShaderParserNew(tokenStream);  // CParserNew is generated by ANTLR3
		if (!psr) Throw(::Exceptions::BasicLabel("Out of memory trying to allocate parser\n"));

		auto* ast = BuildAST(*psr);
		if (!ast) Throw(::Exceptions::BasicLabel("Could not build AST from shader fragment input"));

		// StructureDescription(std::cout, ast);

		auto* strTree = ast->toStringTree(ast);

		AntlrPtr<struct ANTLR3_COMMON_TREE_NODE_STREAM_struct> nodes = antlr3CommonTreeNodeStreamNewTree(ast, ANTLR3_SIZE_HINT);
		AntlrPtr<struct ShaderTreeWalk_Ctx_struct> evalTree = ShaderTreeWalkNew(nodes);

		ExceptionContext exceptionContext;
		WorkingInterfaceStructure sig;
		evalTree->_userData = &sig;
		evalTree->entrypoint(evalTree);
		if (!exceptionContext._exceptions._errors.empty())
			Throw(ShaderSourceParser::Exceptions::ParsingFailure(MakeIteratorRange(exceptionContext._exceptions._errors)));
		
		return sig._signature;
    }
}

extern "C" StringId String_Register(const void* ctx, const pANTLR3_BASE_TREE str) 
{
	auto* w = (ShaderSourceParser::WorkingInterfaceStructure*)((ShaderTreeWalk_Ctx_struct*)ctx)->_userData;
	auto s = ShaderSourceParser::AntlrHelper::AsString<char>(str->toString(str));
	auto h = Hash64(s);
	auto existing = LowerBound(w->_stringTableToId, h);
	if (existing != w->_stringTableToId.end() && existing->first == h) return existing->second;

	auto result = (StringId)w->_stringTable.size();
	w->_stringTable.push_back(s);
	w->_stringTableToId.insert(existing, {h, result});
	return result;
}

extern "C" FormalArgId FormalArg_Register(const void* ctx, struct SSPFormalArg arg)
{
	auto* w = (ShaderSourceParser::WorkingInterfaceStructure*)((ShaderTreeWalk_Ctx_struct*)ctx)->_userData;
	auto result = (StringId)w->_parameterTable.size();
	const unsigned directionFlagOut = 1<<1;
	const unsigned directionFlagIn = 1<<0;
	if (arg._directionFlags & directionFlagIn)
		w->_parameterTable.push_back(
			GraphLanguage::NodeGraphSignature::Parameter { 
				w->GetString(arg._type), 
				w->GetString(arg._name), 
				GraphLanguage::ParameterDirection::In,
				w->GetString(arg._semantic) });
	if (arg._directionFlags & directionFlagOut)
		w->_parameterTable.push_back(
			GraphLanguage::NodeGraphSignature::Parameter { 
				w->GetString(arg._type), 
				w->GetString(arg._name), 
				GraphLanguage::ParameterDirection::Out,
				w->GetString(arg._semantic) });
	return result;
}

extern "C" VariableId Variable_Register(const void* ctx, StringId name, StringId type, StringId semantic)
{
	auto* w = (ShaderSourceParser::WorkingInterfaceStructure*)((ShaderTreeWalk_Ctx_struct*)ctx)->_userData;
	auto result = (StringId)w->_variableTable.size();
	w->_variableTable.push_back(
		GraphLanguage::UniformBufferSignature::Parameter{ 
			w->GetString(name), 
			w->GetString(type), 
			w->GetString(semantic) });
	return result;
}

extern "C" FunctionId Function_Register(const void* ctx, struct SSPFunction* func)
{
	auto* w = (ShaderSourceParser::WorkingInterfaceStructure*)((ShaderTreeWalk_Ctx_struct*)ctx)->_userData;
	GraphLanguage::NodeGraphSignature result;
	auto name = w->GetString(func->_name);
	auto returnType = w->GetString(func->_returnType);
	if (!returnType.empty() && !XlEqString(returnType, "void"))
		result.AddParameter(
			GraphLanguage::NodeGraphSignature::Parameter {
				returnType, GraphLanguage::s_resultName,
				GraphLanguage::ParameterDirection::Out,
				w->GetString(func->_returnSemantic) });
	for (unsigned p=func->_firstArg; p<=func->_lastArg; ++p)
		result.AddParameter(w->_parameterTable[p]);
	w->_signature._functions.emplace_back(std::make_pair(name, std::move(result)));
	return (FunctionId)(w->_signature._functions.size()-1);
}

extern "C" ParameterStructId ParameterStruct_Register(const void* ctx, struct SSPParameterStruct* paramStruct)
{
	auto* w = (ShaderSourceParser::WorkingInterfaceStructure*)((ShaderTreeWalk_Ctx_struct*)ctx)->_userData;
	GraphLanguage::UniformBufferSignature result;
	result._name = w->GetString(paramStruct->_name);
	for (unsigned p=paramStruct->_firstParameter; p<=paramStruct->_lastParameter; ++p)
		result._parameters.push_back(w->_variableTable[p]);
	w->_signature._uniformBuffers.emplace_back(std::move(result));
	return (ParameterStructId)(w->_signature._uniformBuffers.size()-1);
}
